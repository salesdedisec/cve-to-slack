#!/bin/bash

# Define yesterday's date in YYYY-MM-DD format
yesterday=$(date -v -1d +"%Y-%m-%d")

# Define keywords to search for (separate by spaces)
keywords="sql"

# Loop through each keyword
for keyword in $keywords; do
  # Construct the API URL with current keyword and yesterday's dates
  api_url="https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=$keyword&lastModStartDate=${yesterday}T00:00:00.000Z&lastModEndDate=${yesterday}T23:59:00.000Z"

  # Make the API call and capture the response
  response=$(curl -s "$api_url")

  # Check for successful response (status code 200)
  if [[ $? -eq 0 ]]; then
    echo "API request for '$keyword' succeeded."

    results_per_page=$(echo "$response" | jq '.resultsPerPage')
    if [[ $results_per_page -gt 0 ]]; then
      # Extract vulnerabilities from the response
      vulnerabilities=$(echo "$response" | jq -c '.vulnerabilities[]')

      # Loop through each vulnerability
      echo "$vulnerabilities" | while read -r cve; do
        # Extract relevant information
        cve_id=$(echo "$cve" | jq -r '.cve.id')
        published_date=$(echo "$cve" | jq -r '.cve.published' | cut -d'T' -f1)
        last_modified=$(echo "$cve" | jq -r '.cve.lastModified' | cut -d'T' -f1)
        vuln_status=$(echo "$cve" | jq -r '.cve.vulnStatus')
        description=$(echo "$cve" | jq -r '.cve.descriptions[0].value' | sed 's/\\n/ /g')

        references=$(echo "$cve" | jq -r '.cve.references[] | "\(.source): \(.url)"' | paste -sd ', ' -)

        # Check if published or modified yesterday
        if [[ "$published_date" == "$yesterday" ]]; then
          status="Published"
        elif [[ "$last_modified" == "$yesterday" ]]; then
          status="Modified"
        else
          continue  # Skip CVEs not from yesterday
        fi

        # Construct Slack message with color
        message=$(jq -n --arg keyword "$keyword" --arg cve_id "$cve_id" --arg status "$status" --arg published_date "$published_date" --arg last_modified "$last_modified" --arg vuln_status "$vuln_status" --arg description "$description" --arg references "$references" '{
	"attachments": [
		{
			"color": "#36a64f",
			"blocks": [
				{
					"type": "section",
					"text": {
						"type": "mrkdwn",
						"text": "*\($cve_id) (\($status))*"
					}
				},
				{
					"type": "section",
					"fields": [
						{
							"type": "mrkdwn",
							"text": "*Published:*\n\($published_date)"
						},
						{
							"type": "mrkdwn",
							"text": "*Modified:*\n\($last_modified)"
						},
						{
							"type": "mrkdwn",
							"text": "*Vuln Status:*\n\($vuln_status)"
						},
            {
							"type": "mrkdwn",
							"text": "*Keyword Match:*\n\($keyword)"
						}
					]
				},
				{
					"type": "section",
					"text": {
						"type": "mrkdwn",
						"text": "*Description:*\n\($description)"
					}
				},
				{
					"type": "section",
					"text": {
						"type": "mrkdwn",
						"text": "*References:*\n\($references)"
					}
				}
			]
		}
	]
}')

        # Send message to Slack using your webhook URL (replace with yours)
        curl -X POST -H 'Content-type: application/json' --data "$message" CHANGEME
        echo "Sent Slack message for CVE: $cve_id"
      done
    else
      echo "No results found for '$keyword'."
    fi
  else
    echo "API request for '$keyword' failed."
  fi
done
